Terminals which are not used

   TRUE
   FALSE
   AND
   OR


State 9 conflicts: 1 shift/reduce
State 40 conflicts: 9 shift/reduce
State 49 conflicts: 1 reduce/reduce
State 73 conflicts: 4 shift/reduce


Grammar

    0 $accept: program $end

    1 program: headers main '(' ')' '{' body return ';' '}'

    2 headers: headers headers
    3        | INCLUDE

    4 main: datatype ID

    5 datatype: INT
    6         | FLOAT
    7         | CHAR
    8         | VOID

    9 @1: /* empty */

   10 body: FOR @1 '(' statement ';' statement ';' statement ')' '{' body '}'
   11     | statement ';'
   12     | assignment ';'
   13     | body body

   14 @2: /* empty */

   15 body: PRINTFF @2 '(' STR ')' ';'

   16 @3: /* empty */

   17 body: SCANFF @3 '(' STR ',' '&' ID ')' ';'

   18 @4: /* empty */

   19 statement: datatype ID @4 init
   20          | ID '=' value
   21          | ID relop value
   22          | ID UNARY
   23          | UNARY ID

   24 init: '=' value
   25     | /* empty */

   26 value: ID
   27      | NUMBER

   28 assignment: ID '=' expression

   29 expression: expression arithmetic expression
   30           | value

   31 arithmetic: ADD
   32           | SUBTRACT
   33           | MULTIPLY
   34           | DIVIDE

   35 relop: LT
   36      | GT
   37      | LE
   38      | GE
   39      | EQ
   40      | NE

   41 @5: /* empty */

   42 return: RETURN @5 value
   43       | /* empty */


Terminals, with rules where they appear

$end (0) 0
'&' (38) 17
'(' (40) 1 10 15 17
')' (41) 1 10 15 17
',' (44) 17
';' (59) 1 10 11 12 15 17
'=' (61) 20 24 28
'{' (123) 1 10
'}' (125) 1 10
error (256)
PRINTFF (258) 15
SCANFF (259) 17
INT (260) 5
FLOAT (261) 6
CHAR (262) 7
VOID (263) 8
RETURN (264) 42
FOR (265) 10
INCLUDE (266) 3
TRUE (267)
FALSE (268)
NUMBER (269) 27
ID (270) 4 17 19 20 21 22 23 26 28
LE (271) 37
GE (272) 38
EQ (273) 39
NE (274) 40
GT (275) 36
LT (276) 35
AND (277)
OR (278)
STR (279) 15 17
ADD (280) 31
MULTIPLY (281) 33
DIVIDE (282) 34
SUBTRACT (283) 32
UNARY (284) 22 23


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
program (39)
    on left: 1, on right: 0
headers (40)
    on left: 2 3, on right: 1 2
main (41)
    on left: 4, on right: 1
datatype (42)
    on left: 5 6 7 8, on right: 4 19
body (43)
    on left: 10 11 12 13 15 17, on right: 1 10 13
@1 (44)
    on left: 9, on right: 10
@2 (45)
    on left: 14, on right: 15
@3 (46)
    on left: 16, on right: 17
statement (47)
    on left: 19 20 21 22 23, on right: 10 11
@4 (48)
    on left: 18, on right: 19
init (49)
    on left: 24 25, on right: 19
value (50)
    on left: 26 27, on right: 20 21 24 30 42
assignment (51)
    on left: 28, on right: 12
expression (52)
    on left: 29 30, on right: 28 29
arithmetic (53)
    on left: 31 32 33 34, on right: 29
relop (54)
    on left: 35 36 37 38 39 40, on right: 21
return (55)
    on left: 42 43, on right: 1
@5 (56)
    on left: 41, on right: 42


state 0

    0 $accept: . program $end

    INCLUDE  shift, and go to state 1

    program  go to state 2
    headers  go to state 3


state 1

    3 headers: INCLUDE .

    $default  reduce using rule 3 (headers)


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: headers . main '(' ')' '{' body return ';' '}'
    2 headers: headers . headers

    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    INCLUDE  shift, and go to state 1

    headers   go to state 9
    main      go to state 10
    datatype  go to state 11


state 4

    0 $accept: program $end .

    $default  accept


state 5

    5 datatype: INT .

    $default  reduce using rule 5 (datatype)


state 6

    6 datatype: FLOAT .

    $default  reduce using rule 6 (datatype)


state 7

    7 datatype: CHAR .

    $default  reduce using rule 7 (datatype)


state 8

    8 datatype: VOID .

    $default  reduce using rule 8 (datatype)


state 9

    2 headers: headers . headers
    2        | headers headers .

    INCLUDE  shift, and go to state 1

    INCLUDE   [reduce using rule 2 (headers)]
    $default  reduce using rule 2 (headers)

    headers  go to state 9


state 10

    1 program: headers main . '(' ')' '{' body return ';' '}'

    '('  shift, and go to state 12


state 11

    4 main: datatype . ID

    ID  shift, and go to state 13


state 12

    1 program: headers main '(' . ')' '{' body return ';' '}'

    ')'  shift, and go to state 14


state 13

    4 main: datatype ID .

    $default  reduce using rule 4 (main)


state 14

    1 program: headers main '(' ')' . '{' body return ';' '}'

    '{'  shift, and go to state 15


state 15

    1 program: headers main '(' ')' '{' . body return ';' '}'

    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    FOR      shift, and go to state 18
    ID       shift, and go to state 19
    UNARY    shift, and go to state 20

    datatype    go to state 21
    body        go to state 22
    statement   go to state 23
    assignment  go to state 24


state 16

   15 body: PRINTFF . @2 '(' STR ')' ';'

    $default  reduce using rule 14 (@2)

    @2  go to state 25


state 17

   17 body: SCANFF . @3 '(' STR ',' '&' ID ')' ';'

    $default  reduce using rule 16 (@3)

    @3  go to state 26


state 18

   10 body: FOR . @1 '(' statement ';' statement ';' statement ')' '{' body '}'

    $default  reduce using rule 9 (@1)

    @1  go to state 27


state 19

   20 statement: ID . '=' value
   21          | ID . relop value
   22          | ID . UNARY
   28 assignment: ID . '=' expression

    LE     shift, and go to state 28
    GE     shift, and go to state 29
    EQ     shift, and go to state 30
    NE     shift, and go to state 31
    GT     shift, and go to state 32
    LT     shift, and go to state 33
    UNARY  shift, and go to state 34
    '='    shift, and go to state 35

    relop  go to state 36


state 20

   23 statement: UNARY . ID

    ID  shift, and go to state 37


state 21

   19 statement: datatype . ID @4 init

    ID  shift, and go to state 38


state 22

    1 program: headers main '(' ')' '{' body . return ';' '}'
   13 body: body . body

    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    RETURN   shift, and go to state 39
    FOR      shift, and go to state 18
    ID       shift, and go to state 19
    UNARY    shift, and go to state 20

    $default  reduce using rule 43 (return)

    datatype    go to state 21
    body        go to state 40
    statement   go to state 23
    assignment  go to state 24
    return      go to state 41


state 23

   11 body: statement . ';'

    ';'  shift, and go to state 42


state 24

   12 body: assignment . ';'

    ';'  shift, and go to state 43


state 25

   15 body: PRINTFF @2 . '(' STR ')' ';'

    '('  shift, and go to state 44


state 26

   17 body: SCANFF @3 . '(' STR ',' '&' ID ')' ';'

    '('  shift, and go to state 45


state 27

   10 body: FOR @1 . '(' statement ';' statement ';' statement ')' '{' body '}'

    '('  shift, and go to state 46


state 28

   37 relop: LE .

    $default  reduce using rule 37 (relop)


state 29

   38 relop: GE .

    $default  reduce using rule 38 (relop)


state 30

   39 relop: EQ .

    $default  reduce using rule 39 (relop)


state 31

   40 relop: NE .

    $default  reduce using rule 40 (relop)


state 32

   36 relop: GT .

    $default  reduce using rule 36 (relop)


state 33

   35 relop: LT .

    $default  reduce using rule 35 (relop)


state 34

   22 statement: ID UNARY .

    $default  reduce using rule 22 (statement)


state 35

   20 statement: ID '=' . value
   28 assignment: ID '=' . expression

    NUMBER  shift, and go to state 47
    ID      shift, and go to state 48

    value       go to state 49
    expression  go to state 50


state 36

   21 statement: ID relop . value

    NUMBER  shift, and go to state 47
    ID      shift, and go to state 48

    value  go to state 51


state 37

   23 statement: UNARY ID .

    $default  reduce using rule 23 (statement)


state 38

   19 statement: datatype ID . @4 init

    $default  reduce using rule 18 (@4)

    @4  go to state 52


state 39

   42 return: RETURN . @5 value

    $default  reduce using rule 41 (@5)

    @5  go to state 53


state 40

   13 body: body . body
   13     | body body .

    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    FOR      shift, and go to state 18
    ID       shift, and go to state 19
    UNARY    shift, and go to state 20

    PRINTFF   [reduce using rule 13 (body)]
    SCANFF    [reduce using rule 13 (body)]
    INT       [reduce using rule 13 (body)]
    FLOAT     [reduce using rule 13 (body)]
    CHAR      [reduce using rule 13 (body)]
    VOID      [reduce using rule 13 (body)]
    FOR       [reduce using rule 13 (body)]
    ID        [reduce using rule 13 (body)]
    UNARY     [reduce using rule 13 (body)]
    $default  reduce using rule 13 (body)

    datatype    go to state 21
    body        go to state 40
    statement   go to state 23
    assignment  go to state 24


state 41

    1 program: headers main '(' ')' '{' body return . ';' '}'

    ';'  shift, and go to state 54


state 42

   11 body: statement ';' .

    $default  reduce using rule 11 (body)


state 43

   12 body: assignment ';' .

    $default  reduce using rule 12 (body)


state 44

   15 body: PRINTFF @2 '(' . STR ')' ';'

    STR  shift, and go to state 55


state 45

   17 body: SCANFF @3 '(' . STR ',' '&' ID ')' ';'

    STR  shift, and go to state 56


state 46

   10 body: FOR @1 '(' . statement ';' statement ';' statement ')' '{' body '}'

    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6
    CHAR   shift, and go to state 7
    VOID   shift, and go to state 8
    ID     shift, and go to state 57
    UNARY  shift, and go to state 20

    datatype   go to state 21
    statement  go to state 58


state 47

   27 value: NUMBER .

    $default  reduce using rule 27 (value)


state 48

   26 value: ID .

    $default  reduce using rule 26 (value)


state 49

   20 statement: ID '=' value .
   30 expression: value .

    ';'       reduce using rule 20 (statement)
    ';'       [reduce using rule 30 (expression)]
    $default  reduce using rule 30 (expression)


state 50

   28 assignment: ID '=' expression .
   29 expression: expression . arithmetic expression

    ADD       shift, and go to state 59
    MULTIPLY  shift, and go to state 60
    DIVIDE    shift, and go to state 61
    SUBTRACT  shift, and go to state 62

    $default  reduce using rule 28 (assignment)

    arithmetic  go to state 63


state 51

   21 statement: ID relop value .

    $default  reduce using rule 21 (statement)


state 52

   19 statement: datatype ID @4 . init

    '='  shift, and go to state 64

    $default  reduce using rule 25 (init)

    init  go to state 65


state 53

   42 return: RETURN @5 . value

    NUMBER  shift, and go to state 47
    ID      shift, and go to state 48

    value  go to state 66


state 54

    1 program: headers main '(' ')' '{' body return ';' . '}'

    '}'  shift, and go to state 67


state 55

   15 body: PRINTFF @2 '(' STR . ')' ';'

    ')'  shift, and go to state 68


state 56

   17 body: SCANFF @3 '(' STR . ',' '&' ID ')' ';'

    ','  shift, and go to state 69


state 57

   20 statement: ID . '=' value
   21          | ID . relop value
   22          | ID . UNARY

    LE     shift, and go to state 28
    GE     shift, and go to state 29
    EQ     shift, and go to state 30
    NE     shift, and go to state 31
    GT     shift, and go to state 32
    LT     shift, and go to state 33
    UNARY  shift, and go to state 34
    '='    shift, and go to state 70

    relop  go to state 36


state 58

   10 body: FOR @1 '(' statement . ';' statement ';' statement ')' '{' body '}'

    ';'  shift, and go to state 71


state 59

   31 arithmetic: ADD .

    $default  reduce using rule 31 (arithmetic)


state 60

   33 arithmetic: MULTIPLY .

    $default  reduce using rule 33 (arithmetic)


state 61

   34 arithmetic: DIVIDE .

    $default  reduce using rule 34 (arithmetic)


state 62

   32 arithmetic: SUBTRACT .

    $default  reduce using rule 32 (arithmetic)


state 63

   29 expression: expression arithmetic . expression

    NUMBER  shift, and go to state 47
    ID      shift, and go to state 48

    value       go to state 72
    expression  go to state 73


state 64

   24 init: '=' . value

    NUMBER  shift, and go to state 47
    ID      shift, and go to state 48

    value  go to state 74


state 65

   19 statement: datatype ID @4 init .

    $default  reduce using rule 19 (statement)


state 66

   42 return: RETURN @5 value .

    $default  reduce using rule 42 (return)


state 67

    1 program: headers main '(' ')' '{' body return ';' '}' .

    $default  reduce using rule 1 (program)


state 68

   15 body: PRINTFF @2 '(' STR ')' . ';'

    ';'  shift, and go to state 75


state 69

   17 body: SCANFF @3 '(' STR ',' . '&' ID ')' ';'

    '&'  shift, and go to state 76


state 70

   20 statement: ID '=' . value

    NUMBER  shift, and go to state 47
    ID      shift, and go to state 48

    value  go to state 77


state 71

   10 body: FOR @1 '(' statement ';' . statement ';' statement ')' '{' body '}'

    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6
    CHAR   shift, and go to state 7
    VOID   shift, and go to state 8
    ID     shift, and go to state 57
    UNARY  shift, and go to state 20

    datatype   go to state 21
    statement  go to state 78


state 72

   30 expression: value .

    $default  reduce using rule 30 (expression)


state 73

   29 expression: expression . arithmetic expression
   29           | expression arithmetic expression .

    ADD       shift, and go to state 59
    MULTIPLY  shift, and go to state 60
    DIVIDE    shift, and go to state 61
    SUBTRACT  shift, and go to state 62

    ADD       [reduce using rule 29 (expression)]
    MULTIPLY  [reduce using rule 29 (expression)]
    DIVIDE    [reduce using rule 29 (expression)]
    SUBTRACT  [reduce using rule 29 (expression)]
    $default  reduce using rule 29 (expression)

    arithmetic  go to state 63


state 74

   24 init: '=' value .

    $default  reduce using rule 24 (init)


state 75

   15 body: PRINTFF @2 '(' STR ')' ';' .

    $default  reduce using rule 15 (body)


state 76

   17 body: SCANFF @3 '(' STR ',' '&' . ID ')' ';'

    ID  shift, and go to state 79


state 77

   20 statement: ID '=' value .

    $default  reduce using rule 20 (statement)


state 78

   10 body: FOR @1 '(' statement ';' statement . ';' statement ')' '{' body '}'

    ';'  shift, and go to state 80


state 79

   17 body: SCANFF @3 '(' STR ',' '&' ID . ')' ';'

    ')'  shift, and go to state 81


state 80

   10 body: FOR @1 '(' statement ';' statement ';' . statement ')' '{' body '}'

    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6
    CHAR   shift, and go to state 7
    VOID   shift, and go to state 8
    ID     shift, and go to state 57
    UNARY  shift, and go to state 20

    datatype   go to state 21
    statement  go to state 82


state 81

   17 body: SCANFF @3 '(' STR ',' '&' ID ')' . ';'

    ';'  shift, and go to state 83


state 82

   10 body: FOR @1 '(' statement ';' statement ';' statement . ')' '{' body '}'

    ')'  shift, and go to state 84


state 83

   17 body: SCANFF @3 '(' STR ',' '&' ID ')' ';' .

    $default  reduce using rule 17 (body)


state 84

   10 body: FOR @1 '(' statement ';' statement ';' statement ')' . '{' body '}'

    '{'  shift, and go to state 85


state 85

   10 body: FOR @1 '(' statement ';' statement ';' statement ')' '{' . body '}'

    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    FOR      shift, and go to state 18
    ID       shift, and go to state 19
    UNARY    shift, and go to state 20

    datatype    go to state 21
    body        go to state 86
    statement   go to state 23
    assignment  go to state 24


state 86

   10 body: FOR @1 '(' statement ';' statement ';' statement ')' '{' body . '}'
   13     | body . body

    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    FOR      shift, and go to state 18
    ID       shift, and go to state 19
    UNARY    shift, and go to state 20
    '}'      shift, and go to state 87

    datatype    go to state 21
    body        go to state 40
    statement   go to state 23
    assignment  go to state 24


state 87

   10 body: FOR @1 '(' statement ';' statement ';' statement ')' '{' body '}' .

    $default  reduce using rule 10 (body)
