Terminals which are not used

   TRUE
   FALSE
   AND
   OR


State 9 conflicts: 1 shift/reduce
State 39 conflicts: 9 shift/reduce
State 67 conflicts: 4 shift/reduce


Grammar

    0 $accept: program $end

    1 program: headers main '(' ')' '{' body return '}'

    2 headers: headers headers
    3        | INCLUDE

    4 main: datatype ID

    5 datatype: INT
    6         | FLOAT
    7         | CHAR
    8         | VOID

    9 @1: /* empty */

   10 body: FOR @1 '(' statement ';' statement ';' statement ')' '{' body '}'
   11     | statement ';'
   12     | body body

   13 @2: /* empty */

   14 body: PRINTFF @2 '(' STR ')' ';'

   15 @3: /* empty */

   16 body: SCANFF @3 '(' STR ',' '&' ID ')' ';'

   17 @4: /* empty */

   18 statement: datatype ID @4 init
   19          | ID '=' expression
   20          | ID relop value
   21          | ID UNARY
   22          | UNARY ID

   23 init: '=' value
   24     | /* empty */

   25 value: ID
   26      | NUMBER

   27 expression: expression arithmetic expression
   28           | value

   29 arithmetic: ADD
   30           | SUBTRACT
   31           | MULTIPLY
   32           | DIVIDE

   33 relop: LT
   34      | GT
   35      | LE
   36      | GE
   37      | EQ
   38      | NE

   39 @5: /* empty */

   40 return: RETURN @5 value ';'
   41       | /* empty */


Terminals, with rules where they appear

$end (0) 0
'&' (38) 16
'(' (40) 1 10 14 16
')' (41) 1 10 14 16
',' (44) 16
';' (59) 10 11 14 16 40
'=' (61) 19 23
'{' (123) 1 10
'}' (125) 1 10
error (256)
PRINTFF (258) 14
SCANFF (259) 16
INT (260) 5
FLOAT (261) 6
CHAR (262) 7
VOID (263) 8
RETURN (264) 40
FOR (265) 10
INCLUDE (266) 3
TRUE (267)
FALSE (268)
NUMBER (269) 26
ID (270) 4 16 18 19 20 21 22 25
LE (271) 35
GE (272) 36
EQ (273) 37
NE (274) 38
GT (275) 34
LT (276) 33
AND (277)
OR (278)
STR (279) 14 16
ADD (280) 29
MULTIPLY (281) 31
DIVIDE (282) 32
SUBTRACT (283) 30
UNARY (284) 21 22


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
program (39)
    on left: 1, on right: 0
headers (40)
    on left: 2 3, on right: 1 2
main (41)
    on left: 4, on right: 1
datatype (42)
    on left: 5 6 7 8, on right: 4 18
body (43)
    on left: 10 11 12 14 16, on right: 1 10 12
@1 (44)
    on left: 9, on right: 10
@2 (45)
    on left: 13, on right: 14
@3 (46)
    on left: 15, on right: 16
statement (47)
    on left: 18 19 20 21 22, on right: 10 11
@4 (48)
    on left: 17, on right: 18
init (49)
    on left: 23 24, on right: 18
value (50)
    on left: 25 26, on right: 20 23 28 40
expression (51)
    on left: 27 28, on right: 19 27
arithmetic (52)
    on left: 29 30 31 32, on right: 27
relop (53)
    on left: 33 34 35 36 37 38, on right: 20
return (54)
    on left: 40 41, on right: 1
@5 (55)
    on left: 39, on right: 40


state 0

    0 $accept: . program $end

    INCLUDE  shift, and go to state 1

    program  go to state 2
    headers  go to state 3


state 1

    3 headers: INCLUDE .

    $default  reduce using rule 3 (headers)


state 2

    0 $accept: program . $end

    $end  shift, and go to state 4


state 3

    1 program: headers . main '(' ')' '{' body return '}'
    2 headers: headers . headers

    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    INCLUDE  shift, and go to state 1

    headers   go to state 9
    main      go to state 10
    datatype  go to state 11


state 4

    0 $accept: program $end .

    $default  accept


state 5

    5 datatype: INT .

    $default  reduce using rule 5 (datatype)


state 6

    6 datatype: FLOAT .

    $default  reduce using rule 6 (datatype)


state 7

    7 datatype: CHAR .

    $default  reduce using rule 7 (datatype)


state 8

    8 datatype: VOID .

    $default  reduce using rule 8 (datatype)


state 9

    2 headers: headers . headers
    2        | headers headers .

    INCLUDE  shift, and go to state 1

    INCLUDE   [reduce using rule 2 (headers)]
    $default  reduce using rule 2 (headers)

    headers  go to state 9


state 10

    1 program: headers main . '(' ')' '{' body return '}'

    '('  shift, and go to state 12


state 11

    4 main: datatype . ID

    ID  shift, and go to state 13


state 12

    1 program: headers main '(' . ')' '{' body return '}'

    ')'  shift, and go to state 14


state 13

    4 main: datatype ID .

    $default  reduce using rule 4 (main)


state 14

    1 program: headers main '(' ')' . '{' body return '}'

    '{'  shift, and go to state 15


state 15

    1 program: headers main '(' ')' '{' . body return '}'

    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    FOR      shift, and go to state 18
    ID       shift, and go to state 19
    UNARY    shift, and go to state 20

    datatype   go to state 21
    body       go to state 22
    statement  go to state 23


state 16

   14 body: PRINTFF . @2 '(' STR ')' ';'

    $default  reduce using rule 13 (@2)

    @2  go to state 24


state 17

   16 body: SCANFF . @3 '(' STR ',' '&' ID ')' ';'

    $default  reduce using rule 15 (@3)

    @3  go to state 25


state 18

   10 body: FOR . @1 '(' statement ';' statement ';' statement ')' '{' body '}'

    $default  reduce using rule 9 (@1)

    @1  go to state 26


state 19

   19 statement: ID . '=' expression
   20          | ID . relop value
   21          | ID . UNARY

    LE     shift, and go to state 27
    GE     shift, and go to state 28
    EQ     shift, and go to state 29
    NE     shift, and go to state 30
    GT     shift, and go to state 31
    LT     shift, and go to state 32
    UNARY  shift, and go to state 33
    '='    shift, and go to state 34

    relop  go to state 35


state 20

   22 statement: UNARY . ID

    ID  shift, and go to state 36


state 21

   18 statement: datatype . ID @4 init

    ID  shift, and go to state 37


state 22

    1 program: headers main '(' ')' '{' body . return '}'
   12 body: body . body

    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    RETURN   shift, and go to state 38
    FOR      shift, and go to state 18
    ID       shift, and go to state 19
    UNARY    shift, and go to state 20

    $default  reduce using rule 41 (return)

    datatype   go to state 21
    body       go to state 39
    statement  go to state 23
    return     go to state 40


state 23

   11 body: statement . ';'

    ';'  shift, and go to state 41


state 24

   14 body: PRINTFF @2 . '(' STR ')' ';'

    '('  shift, and go to state 42


state 25

   16 body: SCANFF @3 . '(' STR ',' '&' ID ')' ';'

    '('  shift, and go to state 43


state 26

   10 body: FOR @1 . '(' statement ';' statement ';' statement ')' '{' body '}'

    '('  shift, and go to state 44


state 27

   35 relop: LE .

    $default  reduce using rule 35 (relop)


state 28

   36 relop: GE .

    $default  reduce using rule 36 (relop)


state 29

   37 relop: EQ .

    $default  reduce using rule 37 (relop)


state 30

   38 relop: NE .

    $default  reduce using rule 38 (relop)


state 31

   34 relop: GT .

    $default  reduce using rule 34 (relop)


state 32

   33 relop: LT .

    $default  reduce using rule 33 (relop)


state 33

   21 statement: ID UNARY .

    $default  reduce using rule 21 (statement)


state 34

   19 statement: ID '=' . expression

    NUMBER  shift, and go to state 45
    ID      shift, and go to state 46

    value       go to state 47
    expression  go to state 48


state 35

   20 statement: ID relop . value

    NUMBER  shift, and go to state 45
    ID      shift, and go to state 46

    value  go to state 49


state 36

   22 statement: UNARY ID .

    $default  reduce using rule 22 (statement)


state 37

   18 statement: datatype ID . @4 init

    $default  reduce using rule 17 (@4)

    @4  go to state 50


state 38

   40 return: RETURN . @5 value ';'

    $default  reduce using rule 39 (@5)

    @5  go to state 51


state 39

   12 body: body . body
   12     | body body .

    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    FOR      shift, and go to state 18
    ID       shift, and go to state 19
    UNARY    shift, and go to state 20

    PRINTFF   [reduce using rule 12 (body)]
    SCANFF    [reduce using rule 12 (body)]
    INT       [reduce using rule 12 (body)]
    FLOAT     [reduce using rule 12 (body)]
    CHAR      [reduce using rule 12 (body)]
    VOID      [reduce using rule 12 (body)]
    FOR       [reduce using rule 12 (body)]
    ID        [reduce using rule 12 (body)]
    UNARY     [reduce using rule 12 (body)]
    $default  reduce using rule 12 (body)

    datatype   go to state 21
    body       go to state 39
    statement  go to state 23


state 40

    1 program: headers main '(' ')' '{' body return . '}'

    '}'  shift, and go to state 52


state 41

   11 body: statement ';' .

    $default  reduce using rule 11 (body)


state 42

   14 body: PRINTFF @2 '(' . STR ')' ';'

    STR  shift, and go to state 53


state 43

   16 body: SCANFF @3 '(' . STR ',' '&' ID ')' ';'

    STR  shift, and go to state 54


state 44

   10 body: FOR @1 '(' . statement ';' statement ';' statement ')' '{' body '}'

    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6
    CHAR   shift, and go to state 7
    VOID   shift, and go to state 8
    ID     shift, and go to state 19
    UNARY  shift, and go to state 20

    datatype   go to state 21
    statement  go to state 55


state 45

   26 value: NUMBER .

    $default  reduce using rule 26 (value)


state 46

   25 value: ID .

    $default  reduce using rule 25 (value)


state 47

   28 expression: value .

    $default  reduce using rule 28 (expression)


state 48

   19 statement: ID '=' expression .
   27 expression: expression . arithmetic expression

    ADD       shift, and go to state 56
    MULTIPLY  shift, and go to state 57
    DIVIDE    shift, and go to state 58
    SUBTRACT  shift, and go to state 59

    $default  reduce using rule 19 (statement)

    arithmetic  go to state 60


state 49

   20 statement: ID relop value .

    $default  reduce using rule 20 (statement)


state 50

   18 statement: datatype ID @4 . init

    '='  shift, and go to state 61

    $default  reduce using rule 24 (init)

    init  go to state 62


state 51

   40 return: RETURN @5 . value ';'

    NUMBER  shift, and go to state 45
    ID      shift, and go to state 46

    value  go to state 63


state 52

    1 program: headers main '(' ')' '{' body return '}' .

    $default  reduce using rule 1 (program)


state 53

   14 body: PRINTFF @2 '(' STR . ')' ';'

    ')'  shift, and go to state 64


state 54

   16 body: SCANFF @3 '(' STR . ',' '&' ID ')' ';'

    ','  shift, and go to state 65


state 55

   10 body: FOR @1 '(' statement . ';' statement ';' statement ')' '{' body '}'

    ';'  shift, and go to state 66


state 56

   29 arithmetic: ADD .

    $default  reduce using rule 29 (arithmetic)


state 57

   31 arithmetic: MULTIPLY .

    $default  reduce using rule 31 (arithmetic)


state 58

   32 arithmetic: DIVIDE .

    $default  reduce using rule 32 (arithmetic)


state 59

   30 arithmetic: SUBTRACT .

    $default  reduce using rule 30 (arithmetic)


state 60

   27 expression: expression arithmetic . expression

    NUMBER  shift, and go to state 45
    ID      shift, and go to state 46

    value       go to state 47
    expression  go to state 67


state 61

   23 init: '=' . value

    NUMBER  shift, and go to state 45
    ID      shift, and go to state 46

    value  go to state 68


state 62

   18 statement: datatype ID @4 init .

    $default  reduce using rule 18 (statement)


state 63

   40 return: RETURN @5 value . ';'

    ';'  shift, and go to state 69


state 64

   14 body: PRINTFF @2 '(' STR ')' . ';'

    ';'  shift, and go to state 70


state 65

   16 body: SCANFF @3 '(' STR ',' . '&' ID ')' ';'

    '&'  shift, and go to state 71


state 66

   10 body: FOR @1 '(' statement ';' . statement ';' statement ')' '{' body '}'

    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6
    CHAR   shift, and go to state 7
    VOID   shift, and go to state 8
    ID     shift, and go to state 19
    UNARY  shift, and go to state 20

    datatype   go to state 21
    statement  go to state 72


state 67

   27 expression: expression . arithmetic expression
   27           | expression arithmetic expression .

    ADD       shift, and go to state 56
    MULTIPLY  shift, and go to state 57
    DIVIDE    shift, and go to state 58
    SUBTRACT  shift, and go to state 59

    ADD       [reduce using rule 27 (expression)]
    MULTIPLY  [reduce using rule 27 (expression)]
    DIVIDE    [reduce using rule 27 (expression)]
    SUBTRACT  [reduce using rule 27 (expression)]
    $default  reduce using rule 27 (expression)

    arithmetic  go to state 60


state 68

   23 init: '=' value .

    $default  reduce using rule 23 (init)


state 69

   40 return: RETURN @5 value ';' .

    $default  reduce using rule 40 (return)


state 70

   14 body: PRINTFF @2 '(' STR ')' ';' .

    $default  reduce using rule 14 (body)


state 71

   16 body: SCANFF @3 '(' STR ',' '&' . ID ')' ';'

    ID  shift, and go to state 73


state 72

   10 body: FOR @1 '(' statement ';' statement . ';' statement ')' '{' body '}'

    ';'  shift, and go to state 74


state 73

   16 body: SCANFF @3 '(' STR ',' '&' ID . ')' ';'

    ')'  shift, and go to state 75


state 74

   10 body: FOR @1 '(' statement ';' statement ';' . statement ')' '{' body '}'

    INT    shift, and go to state 5
    FLOAT  shift, and go to state 6
    CHAR   shift, and go to state 7
    VOID   shift, and go to state 8
    ID     shift, and go to state 19
    UNARY  shift, and go to state 20

    datatype   go to state 21
    statement  go to state 76


state 75

   16 body: SCANFF @3 '(' STR ',' '&' ID ')' . ';'

    ';'  shift, and go to state 77


state 76

   10 body: FOR @1 '(' statement ';' statement ';' statement . ')' '{' body '}'

    ')'  shift, and go to state 78


state 77

   16 body: SCANFF @3 '(' STR ',' '&' ID ')' ';' .

    $default  reduce using rule 16 (body)


state 78

   10 body: FOR @1 '(' statement ';' statement ';' statement ')' . '{' body '}'

    '{'  shift, and go to state 79


state 79

   10 body: FOR @1 '(' statement ';' statement ';' statement ')' '{' . body '}'

    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    FOR      shift, and go to state 18
    ID       shift, and go to state 19
    UNARY    shift, and go to state 20

    datatype   go to state 21
    body       go to state 80
    statement  go to state 23


state 80

   10 body: FOR @1 '(' statement ';' statement ';' statement ')' '{' body . '}'
   12     | body . body

    PRINTFF  shift, and go to state 16
    SCANFF   shift, and go to state 17
    INT      shift, and go to state 5
    FLOAT    shift, and go to state 6
    CHAR     shift, and go to state 7
    VOID     shift, and go to state 8
    FOR      shift, and go to state 18
    ID       shift, and go to state 19
    UNARY    shift, and go to state 20
    '}'      shift, and go to state 81

    datatype   go to state 21
    body       go to state 39
    statement  go to state 23


state 81

   10 body: FOR @1 '(' statement ';' statement ';' statement ')' '{' body '}' .

    $default  reduce using rule 10 (body)
