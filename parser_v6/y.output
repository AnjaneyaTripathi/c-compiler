Terminals which are not used

   AND
   OR


State 10 conflicts: 1 shift/reduce
State 42 conflicts: 10 shift/reduce
State 78 conflicts: 4 shift/reduce


Grammar

    0 $accept: program $end

    1 program: headers main '(' ')' '{' body return '}'

    2 headers: headers headers

    3 @1: /* empty */

    4 headers: INCLUDE @1

    5 main: datatype ID

    6 datatype: INT
    7         | FLOAT
    8         | CHAR
    9         | VOID

   10 @2: /* empty */

   11 body: FOR @2 '(' statement ';' statement ';' statement ')' '{' body '}'
   12     | IF '(' condition ')' '{' body '}' else
   13     | statement ';'
   14     | body body

   15 @3: /* empty */

   16 body: PRINTFF @3 '(' STR ')' ';'

   17 @4: /* empty */

   18 body: SCANFF @4 '(' STR ',' '&' ID ')' ';'

   19 @5: /* empty */

   20 else: ELSE @5 '{' body '}'
   21     | /* empty */

   22 condition: value relop value
   23          | TRUE
   24          | FALSE
   25          | /* empty */

   26 @6: /* empty */

   27 statement: datatype ID @6 init
   28          | ID '=' expression
   29          | ID relop expression
   30          | ID UNARY
   31          | UNARY ID

   32 init: '=' value
   33     | /* empty */

   34 expression: expression arithmetic expression
   35           | value

   36 arithmetic: ADD
   37           | SUBTRACT
   38           | MULTIPLY
   39           | DIVIDE

   40 relop: LT
   41      | GT
   42      | LE
   43      | GE
   44      | EQ
   45      | NE

   46 value: NUMBER
   47      | ID

   48 return: RETURN NUMBER ';'
   49       | /* empty */


Terminals, with rules where they appear

$end (0) 0
'&' (38) 18
'(' (40) 1 11 12 16 18
')' (41) 1 11 12 16 18
',' (44) 18
';' (59) 11 13 16 18 48
'=' (61) 28 32
'{' (123) 1 11 12 20
'}' (125) 1 11 12 20
error (256)
VOID (258) 9
PRINTFF (259) 16
SCANFF (260) 18
INT (261) 6
FLOAT (262) 7
CHAR (263) 8
FOR (264) 11
IF (265) 12
ELSE (266) 20
TRUE (267) 23
FALSE (268) 24
NUMBER (269) 46 48
ID (270) 5 18 27 28 29 30 31 47
LE (271) 42
GE (272) 43
EQ (273) 44
NE (274) 45
GT (275) 41
LT (276) 40
AND (277)
OR (278)
STR (279) 16 18
ADD (280) 36
MULTIPLY (281) 38
DIVIDE (282) 39
SUBTRACT (283) 37
UNARY (284) 30 31
INCLUDE (285) 4
RETURN (286) 48


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
program (41)
    on left: 1, on right: 0
headers (42)
    on left: 2 4, on right: 1 2
@1 (43)
    on left: 3, on right: 4
main (44)
    on left: 5, on right: 1
datatype (45)
    on left: 6 7 8 9, on right: 5 27
body (46)
    on left: 11 12 13 14 16 18, on right: 1 11 12 14 20
@2 (47)
    on left: 10, on right: 11
@3 (48)
    on left: 15, on right: 16
@4 (49)
    on left: 17, on right: 18
else (50)
    on left: 20 21, on right: 12
@5 (51)
    on left: 19, on right: 20
condition (52)
    on left: 22 23 24 25, on right: 12
statement (53)
    on left: 27 28 29 30 31, on right: 11 13
@6 (54)
    on left: 26, on right: 27
init (55)
    on left: 32 33, on right: 27
expression (56)
    on left: 34 35, on right: 28 29 34
arithmetic (57)
    on left: 36 37 38 39, on right: 34
relop (58)
    on left: 40 41 42 43 44 45, on right: 22 29
value (59)
    on left: 46 47, on right: 22 32 35
return (60)
    on left: 48 49, on right: 1


state 0

    0 $accept: . program $end

    INCLUDE  shift, and go to state 1

    program  go to state 2
    headers  go to state 3


state 1

    4 headers: INCLUDE . @1

    $default  reduce using rule 3 (@1)

    @1  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: headers . main '(' ')' '{' body return '}'
    2 headers: headers . headers

    VOID     shift, and go to state 6
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    INCLUDE  shift, and go to state 1

    headers   go to state 10
    main      go to state 11
    datatype  go to state 12


state 4

    4 headers: INCLUDE @1 .

    $default  reduce using rule 4 (headers)


state 5

    0 $accept: program $end .

    $default  accept


state 6

    9 datatype: VOID .

    $default  reduce using rule 9 (datatype)


state 7

    6 datatype: INT .

    $default  reduce using rule 6 (datatype)


state 8

    7 datatype: FLOAT .

    $default  reduce using rule 7 (datatype)


state 9

    8 datatype: CHAR .

    $default  reduce using rule 8 (datatype)


state 10

    2 headers: headers . headers
    2        | headers headers .

    INCLUDE  shift, and go to state 1

    INCLUDE   [reduce using rule 2 (headers)]
    $default  reduce using rule 2 (headers)

    headers  go to state 10


state 11

    1 program: headers main . '(' ')' '{' body return '}'

    '('  shift, and go to state 13


state 12

    5 main: datatype . ID

    ID  shift, and go to state 14


state 13

    1 program: headers main '(' . ')' '{' body return '}'

    ')'  shift, and go to state 15


state 14

    5 main: datatype ID .

    $default  reduce using rule 5 (main)


state 15

    1 program: headers main '(' ')' . '{' body return '}'

    '{'  shift, and go to state 16


state 16

    1 program: headers main '(' ')' '{' . body return '}'

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22

    datatype   go to state 23
    body       go to state 24
    statement  go to state 25


state 17

   16 body: PRINTFF . @3 '(' STR ')' ';'

    $default  reduce using rule 15 (@3)

    @3  go to state 26


state 18

   18 body: SCANFF . @4 '(' STR ',' '&' ID ')' ';'

    $default  reduce using rule 17 (@4)

    @4  go to state 27


state 19

   11 body: FOR . @2 '(' statement ';' statement ';' statement ')' '{' body '}'

    $default  reduce using rule 10 (@2)

    @2  go to state 28


state 20

   12 body: IF . '(' condition ')' '{' body '}' else

    '('  shift, and go to state 29


state 21

   28 statement: ID . '=' expression
   29          | ID . relop expression
   30          | ID . UNARY

    LE     shift, and go to state 30
    GE     shift, and go to state 31
    EQ     shift, and go to state 32
    NE     shift, and go to state 33
    GT     shift, and go to state 34
    LT     shift, and go to state 35
    UNARY  shift, and go to state 36
    '='    shift, and go to state 37

    relop  go to state 38


state 22

   31 statement: UNARY . ID

    ID  shift, and go to state 39


state 23

   27 statement: datatype . ID @6 init

    ID  shift, and go to state 40


state 24

    1 program: headers main '(' ')' '{' body . return '}'
   14 body: body . body

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22
    RETURN   shift, and go to state 41

    $default  reduce using rule 49 (return)

    datatype   go to state 23
    body       go to state 42
    statement  go to state 25
    return     go to state 43


state 25

   13 body: statement . ';'

    ';'  shift, and go to state 44


state 26

   16 body: PRINTFF @3 . '(' STR ')' ';'

    '('  shift, and go to state 45


state 27

   18 body: SCANFF @4 . '(' STR ',' '&' ID ')' ';'

    '('  shift, and go to state 46


state 28

   11 body: FOR @2 . '(' statement ';' statement ';' statement ')' '{' body '}'

    '('  shift, and go to state 47


state 29

   12 body: IF '(' . condition ')' '{' body '}' else

    TRUE    shift, and go to state 48
    FALSE   shift, and go to state 49
    NUMBER  shift, and go to state 50
    ID      shift, and go to state 51

    $default  reduce using rule 25 (condition)

    condition  go to state 52
    value      go to state 53


state 30

   42 relop: LE .

    $default  reduce using rule 42 (relop)


state 31

   43 relop: GE .

    $default  reduce using rule 43 (relop)


state 32

   44 relop: EQ .

    $default  reduce using rule 44 (relop)


state 33

   45 relop: NE .

    $default  reduce using rule 45 (relop)


state 34

   41 relop: GT .

    $default  reduce using rule 41 (relop)


state 35

   40 relop: LT .

    $default  reduce using rule 40 (relop)


state 36

   30 statement: ID UNARY .

    $default  reduce using rule 30 (statement)


state 37

   28 statement: ID '=' . expression

    NUMBER  shift, and go to state 50
    ID      shift, and go to state 51

    expression  go to state 54
    value       go to state 55


state 38

   29 statement: ID relop . expression

    NUMBER  shift, and go to state 50
    ID      shift, and go to state 51

    expression  go to state 56
    value       go to state 55


state 39

   31 statement: UNARY ID .

    $default  reduce using rule 31 (statement)


state 40

   27 statement: datatype ID . @6 init

    $default  reduce using rule 26 (@6)

    @6  go to state 57


state 41

   48 return: RETURN . NUMBER ';'

    NUMBER  shift, and go to state 58


state 42

   14 body: body . body
   14     | body body .

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22

    VOID      [reduce using rule 14 (body)]
    PRINTFF   [reduce using rule 14 (body)]
    SCANFF    [reduce using rule 14 (body)]
    INT       [reduce using rule 14 (body)]
    FLOAT     [reduce using rule 14 (body)]
    CHAR      [reduce using rule 14 (body)]
    FOR       [reduce using rule 14 (body)]
    IF        [reduce using rule 14 (body)]
    ID        [reduce using rule 14 (body)]
    UNARY     [reduce using rule 14 (body)]
    $default  reduce using rule 14 (body)

    datatype   go to state 23
    body       go to state 42
    statement  go to state 25


state 43

    1 program: headers main '(' ')' '{' body return . '}'

    '}'  shift, and go to state 59


state 44

   13 body: statement ';' .

    $default  reduce using rule 13 (body)


state 45

   16 body: PRINTFF @3 '(' . STR ')' ';'

    STR  shift, and go to state 60


state 46

   18 body: SCANFF @4 '(' . STR ',' '&' ID ')' ';'

    STR  shift, and go to state 61


state 47

   11 body: FOR @2 '(' . statement ';' statement ';' statement ')' '{' body '}'

    VOID   shift, and go to state 6
    INT    shift, and go to state 7
    FLOAT  shift, and go to state 8
    CHAR   shift, and go to state 9
    ID     shift, and go to state 21
    UNARY  shift, and go to state 22

    datatype   go to state 23
    statement  go to state 62


state 48

   23 condition: TRUE .

    $default  reduce using rule 23 (condition)


state 49

   24 condition: FALSE .

    $default  reduce using rule 24 (condition)


state 50

   46 value: NUMBER .

    $default  reduce using rule 46 (value)


state 51

   47 value: ID .

    $default  reduce using rule 47 (value)


state 52

   12 body: IF '(' condition . ')' '{' body '}' else

    ')'  shift, and go to state 63


state 53

   22 condition: value . relop value

    LE  shift, and go to state 30
    GE  shift, and go to state 31
    EQ  shift, and go to state 32
    NE  shift, and go to state 33
    GT  shift, and go to state 34
    LT  shift, and go to state 35

    relop  go to state 64


state 54

   28 statement: ID '=' expression .
   34 expression: expression . arithmetic expression

    ADD       shift, and go to state 65
    MULTIPLY  shift, and go to state 66
    DIVIDE    shift, and go to state 67
    SUBTRACT  shift, and go to state 68

    $default  reduce using rule 28 (statement)

    arithmetic  go to state 69


state 55

   35 expression: value .

    $default  reduce using rule 35 (expression)


state 56

   29 statement: ID relop expression .
   34 expression: expression . arithmetic expression

    ADD       shift, and go to state 65
    MULTIPLY  shift, and go to state 66
    DIVIDE    shift, and go to state 67
    SUBTRACT  shift, and go to state 68

    $default  reduce using rule 29 (statement)

    arithmetic  go to state 69


state 57

   27 statement: datatype ID @6 . init

    '='  shift, and go to state 70

    $default  reduce using rule 33 (init)

    init  go to state 71


state 58

   48 return: RETURN NUMBER . ';'

    ';'  shift, and go to state 72


state 59

    1 program: headers main '(' ')' '{' body return '}' .

    $default  reduce using rule 1 (program)


state 60

   16 body: PRINTFF @3 '(' STR . ')' ';'

    ')'  shift, and go to state 73


state 61

   18 body: SCANFF @4 '(' STR . ',' '&' ID ')' ';'

    ','  shift, and go to state 74


state 62

   11 body: FOR @2 '(' statement . ';' statement ';' statement ')' '{' body '}'

    ';'  shift, and go to state 75


state 63

   12 body: IF '(' condition ')' . '{' body '}' else

    '{'  shift, and go to state 76


state 64

   22 condition: value relop . value

    NUMBER  shift, and go to state 50
    ID      shift, and go to state 51

    value  go to state 77


state 65

   36 arithmetic: ADD .

    $default  reduce using rule 36 (arithmetic)


state 66

   38 arithmetic: MULTIPLY .

    $default  reduce using rule 38 (arithmetic)


state 67

   39 arithmetic: DIVIDE .

    $default  reduce using rule 39 (arithmetic)


state 68

   37 arithmetic: SUBTRACT .

    $default  reduce using rule 37 (arithmetic)


state 69

   34 expression: expression arithmetic . expression

    NUMBER  shift, and go to state 50
    ID      shift, and go to state 51

    expression  go to state 78
    value       go to state 55


state 70

   32 init: '=' . value

    NUMBER  shift, and go to state 50
    ID      shift, and go to state 51

    value  go to state 79


state 71

   27 statement: datatype ID @6 init .

    $default  reduce using rule 27 (statement)


state 72

   48 return: RETURN NUMBER ';' .

    $default  reduce using rule 48 (return)


state 73

   16 body: PRINTFF @3 '(' STR ')' . ';'

    ';'  shift, and go to state 80


state 74

   18 body: SCANFF @4 '(' STR ',' . '&' ID ')' ';'

    '&'  shift, and go to state 81


state 75

   11 body: FOR @2 '(' statement ';' . statement ';' statement ')' '{' body '}'

    VOID   shift, and go to state 6
    INT    shift, and go to state 7
    FLOAT  shift, and go to state 8
    CHAR   shift, and go to state 9
    ID     shift, and go to state 21
    UNARY  shift, and go to state 22

    datatype   go to state 23
    statement  go to state 82


state 76

   12 body: IF '(' condition ')' '{' . body '}' else

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22

    datatype   go to state 23
    body       go to state 83
    statement  go to state 25


state 77

   22 condition: value relop value .

    $default  reduce using rule 22 (condition)


state 78

   34 expression: expression . arithmetic expression
   34           | expression arithmetic expression .

    ADD       shift, and go to state 65
    MULTIPLY  shift, and go to state 66
    DIVIDE    shift, and go to state 67
    SUBTRACT  shift, and go to state 68

    ADD       [reduce using rule 34 (expression)]
    MULTIPLY  [reduce using rule 34 (expression)]
    DIVIDE    [reduce using rule 34 (expression)]
    SUBTRACT  [reduce using rule 34 (expression)]
    $default  reduce using rule 34 (expression)

    arithmetic  go to state 69


state 79

   32 init: '=' value .

    $default  reduce using rule 32 (init)


state 80

   16 body: PRINTFF @3 '(' STR ')' ';' .

    $default  reduce using rule 16 (body)


state 81

   18 body: SCANFF @4 '(' STR ',' '&' . ID ')' ';'

    ID  shift, and go to state 84


state 82

   11 body: FOR @2 '(' statement ';' statement . ';' statement ')' '{' body '}'

    ';'  shift, and go to state 85


state 83

   12 body: IF '(' condition ')' '{' body . '}' else
   14     | body . body

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22
    '}'      shift, and go to state 86

    datatype   go to state 23
    body       go to state 42
    statement  go to state 25


state 84

   18 body: SCANFF @4 '(' STR ',' '&' ID . ')' ';'

    ')'  shift, and go to state 87


state 85

   11 body: FOR @2 '(' statement ';' statement ';' . statement ')' '{' body '}'

    VOID   shift, and go to state 6
    INT    shift, and go to state 7
    FLOAT  shift, and go to state 8
    CHAR   shift, and go to state 9
    ID     shift, and go to state 21
    UNARY  shift, and go to state 22

    datatype   go to state 23
    statement  go to state 88


state 86

   12 body: IF '(' condition ')' '{' body '}' . else

    ELSE  shift, and go to state 89

    $default  reduce using rule 21 (else)

    else  go to state 90


state 87

   18 body: SCANFF @4 '(' STR ',' '&' ID ')' . ';'

    ';'  shift, and go to state 91


state 88

   11 body: FOR @2 '(' statement ';' statement ';' statement . ')' '{' body '}'

    ')'  shift, and go to state 92


state 89

   20 else: ELSE . @5 '{' body '}'

    $default  reduce using rule 19 (@5)

    @5  go to state 93


state 90

   12 body: IF '(' condition ')' '{' body '}' else .

    $default  reduce using rule 12 (body)


state 91

   18 body: SCANFF @4 '(' STR ',' '&' ID ')' ';' .

    $default  reduce using rule 18 (body)


state 92

   11 body: FOR @2 '(' statement ';' statement ';' statement ')' . '{' body '}'

    '{'  shift, and go to state 94


state 93

   20 else: ELSE @5 . '{' body '}'

    '{'  shift, and go to state 95


state 94

   11 body: FOR @2 '(' statement ';' statement ';' statement ')' '{' . body '}'

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22

    datatype   go to state 23
    body       go to state 96
    statement  go to state 25


state 95

   20 else: ELSE @5 '{' . body '}'

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22

    datatype   go to state 23
    body       go to state 97
    statement  go to state 25


state 96

   11 body: FOR @2 '(' statement ';' statement ';' statement ')' '{' body . '}'
   14     | body . body

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22
    '}'      shift, and go to state 98

    datatype   go to state 23
    body       go to state 42
    statement  go to state 25


state 97

   14 body: body . body
   20 else: ELSE @5 '{' body . '}'

    VOID     shift, and go to state 6
    PRINTFF  shift, and go to state 17
    SCANFF   shift, and go to state 18
    INT      shift, and go to state 7
    FLOAT    shift, and go to state 8
    CHAR     shift, and go to state 9
    FOR      shift, and go to state 19
    IF       shift, and go to state 20
    ID       shift, and go to state 21
    UNARY    shift, and go to state 22
    '}'      shift, and go to state 99

    datatype   go to state 23
    body       go to state 42
    statement  go to state 25


state 98

   11 body: FOR @2 '(' statement ';' statement ';' statement ')' '{' body '}' .

    $default  reduce using rule 11 (body)


state 99

   20 else: ELSE @5 '{' body '}' .

    $default  reduce using rule 20 (else)
